{"version":3,"sources":["Components/SortingAlgo.jsx","Components/Sortalgo.jsx","Components/Logo.svg","Components/Popup.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SECONDARY_COLOR","PRIMARY_COLOR","Sortalgo","props","state","setArray","this","setState","e","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","time","newHeight","height","auxiliary","translation","console","log","iMin","temp","xchange","SelectionSortAnimations","display","justifyContent","alignItems","textAlign","marginTop","marginBottom","Typography","variant","noWrap","algo","Button","onClick","mergeSort","SelectionSort","width","Reset","Paper","elevation","postion","padding","map","value","idx","className","id","taille","marginRight","Component","min","max","random","position","top","left","transform","Popup","React","useState","open","setOpen","Modal","outline","onClose","sx","component","mt","gutterBottom","bottom","src","Logo","alt","Algos","type","App","setTaille","Arrow","setArrow","setAlgo","Toolbar","for","Box","Slider","size","onChange","event","newv","defaultValue","valueLabelDisplay","label","NumberofArrow","list","handleAlgo","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d9aee768.chunk.js","sourcesContent":["function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n// SELECTION SORT ALGO\r\nfunction SelectionSortAnimations(array, length) {\r\n  const auxiliary = array.slice();\r\n  const animations = [];\r\n  const translation = [];\r\n  console.log(auxiliary);\r\n  for (let i = 0; i < length - 1; i++) {\r\n    let iMin = i;\r\n    for (let j = i + 1; j < length; j++) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (array[j] < array[iMin]) {\r\n        iMin = j;\r\n      }\r\n      let temp = array[i];\r\n      translation.push([i, array[iMin]]);\r\n      translation.push([iMin, temp]);\r\n    }\r\n    const xchange = array[i];\r\n    array[i] = array[iMin];\r\n    array[iMin] = xchange;\r\n  }\r\n  console.log(translation);\r\n  return { animations, translation };\r\n}\r\n\r\n// const merge = (left_arr, right_arr,animations) =>{\r\n//     const output = [];\r\n//     let leftIndex = 0;\r\n//     let rightIndex = 0;\r\n//     while(leftIndex<left_arr.length && rightIndex < right_arr.length){\r\n//         animations.push([leftIndex,rightIndex])\r\n//         animations.push([leftIndex,rightIndex])\r\n//       const left = left_arr[leftIndex]\r\n//       const right = right_arr[rightIndex]\r\n//       if(left < right){\r\n//         output.push(left)\r\n//         leftIndex += 1;\r\n//       }else{\r\n//         output.push(right);\r\n//         rightIndex += 1;\r\n//       }\r\n\r\n//     }\r\n//     return [...output, ...left_arr.slice(leftIndex),...right_arr.slice(rightIndex)]\r\n\r\n//   }\r\n//   const merge_sort = (arr,animations) =>{\r\n\r\n//       const middle = Math.floor(arr.length/2)\r\n//       const left_arr = arr.slice(0,middle)\r\n//       const right_arr = arr.slice(middle)\r\n\r\n//       merge(merge_sort(left_arr,animations),merge_sort(right_arr,animations));\r\n\r\n//   }\r\n\r\nexport { getMergeSortAnimations, SelectionSortAnimations };\r\n","import React, { Component } from \"react\";\r\nimport \"./Sortalgo.css\";\r\nimport { Button, Paper ,Typography} from \"@mui/material\";\r\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\r\nimport ReplayIcon from \"@mui/icons-material/Replay\";\r\nimport { getMergeSortAnimations } from \"./SortingAlgo\";\r\nimport { SelectionSortAnimations } from \"./SortingAlgo\";\r\nconst NUMBER_BARS = 50;\r\nconst SECONDARY_COLOR = '#f68a2a';\r\nconst PRIMARY_COLOR = '#00514e';\r\n\r\nexport default class Sortalgo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const array = setArray();\r\n    this.setState({ array });\r\n  }\r\n  Reset(e) {\r\n    const array = setArray();\r\n    this.setState({ array });\r\n    // Need to clearTimeout(setTimout)\r\n  }\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {  \r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.props.time);\r\n      }\r\n       else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * this.props.time);\r\n      }\r\n    }\r\n  }\r\n  SelectionSort(){\r\n    const length = this.state.array.length\r\n    const {animations,translation} = SelectionSortAnimations(this.state.array,length);\r\n    for(let i =0; i<animations.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (true) {  \r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.props.time);\r\n      }\r\n    }\r\n    for(let i =0; i<translation.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (true) {  \r\n        setTimeout(() => {\r\n          console.log(translation[i])\r\n          const [barOneIdx, newHeight] = translation[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * this.props.time);\r\n      }\r\n    }\r\n  }\r\n  // Visual() {\r\n  //   const { array } = this.state;\r\n\r\n  //   for (let i = 0; i < NUMBER_BARS; i++) {\r\n  //     let x = document.getElementById(`Bar-${i}`);\r\n  //     setTimeout(() => {\r\n  //       x.style.backgroundColor = \"#00348e\";\r\n  //     }, i * this.props.time);\r\n  //   }\r\n\r\n  //   // console.log(arrayBars)\r\n  //   // for(let ele in elet[0]){\r\n  //   //     console.log(\"----->\",ele)\r\n  //   // }\r\n  // }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <>\r\n        <div style={{display:\"flex\",justifyContent:\"space-evenly\",alignItems:'center', textAlign: \"center\", marginTop: \"10px \",marginBottom:'10px' }}>\r\n          <Typography\r\n                style={{ color: \"#3f3d56\" }}\r\n                variant=\"h3\"\r\n                noWrap\r\n              >\r\n                Visualising : {this.props.algo} Algorithm\r\n              </Typography>\r\n          <div>\r\n          <Button\r\n            onClick={()=>{\r\n              if(this.props.algo === \"Mergesort\"){\r\n                this.mergeSort()\r\n              }else if(this.props.algo === \"SelectionSort\"){\r\n                this.SelectionSort()\r\n              }\r\n            }}\r\n            style={{ color: \"#39374e\" }}\r\n            aria-label=\"add\"\r\n          >\r\n            <PlayArrowIcon style={{ width: \"30px\", height: \"30px\" }} />\r\n          </Button>\r\n          <Button\r\n            onClick={() => this.Reset()}\r\n            style={{ color: \"#39374e\" }}\r\n            aria-label=\"add\"\r\n          >\r\n            <ReplayIcon style={{ width: \"30px\", height: \"30px\" }} />\r\n          </Button>\r\n          </div>\r\n        </div>\r\n        <Paper  elevation={3} style={{postion:'absoslute',height: \"100%\", padding: \"2em\",textAlign :'center' }}>\r\n            {array.map((value, idx) => (\r\n              <div\r\n                className=\"array-bar\"\r\n                id={`Bar-${idx}`}\r\n                key={idx}\r\n                style={{\r\n                  backgroundColor: PRIMARY_COLOR,\r\n                  height: `${value}px`,\r\n                  width: `${this.props.taille}px` || '15px',\r\n                  marginRight: \"2px\",\r\n                }}\r\n              ></div>\r\n            ))}\r\n        </Paper>\r\n      </>\r\n    );\r\n  }\r\n}\r\nfunction setArray() {\r\n  const randomInt = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  };\r\n  var array = [];\r\n  for (let i = 0; i < NUMBER_BARS; i++) {\r\n    array.push(randomInt(30, 200));\r\n  }\r\n\r\n  return array;\r\n}","export default __webpack_public_path__ + \"static/media/Logo.c75d1d34.svg\";","import React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { Paper } from \"@mui/material\";\r\nimport Logo from \"./Logo.svg\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"45%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"70%\",\r\n  width: \"40%\",\r\n  padding: \"10px 10px 10px\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nexport default function Popup() {\r\n  const [open, setOpen] = React.useState(true);\r\n  \r\n  const handleClose = () => setOpen(false);\r\n  return (\r\n    <div>\r\n      <Modal style={{outline:'none'}}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Paper sx={style} style={{outline:'none'}}>\r\n          <Typography\r\n            id=\"sort-Visualser\"\r\n            style={{ color: \"#3F3D56\" }}\r\n            variant=\"h4\"\r\n            component=\"h2\"\r\n            sx={{ mt: 5 }}\r\n          >\r\n            Welcome to Sort Algothims Visualiser\r\n          </Typography>\r\n          <Typography\r\n            id=\"modal-modal-description\"\r\n            style={{ color: \"#3F3D56\" }}\r\n            variant=\"body1\" gutterBottom\r\n            sx={{ mt: 5 }}\r\n          >\r\n            A Sorting Algorithm is used to rearrange a given array or list\r\n            elements according to a comparison operator on the elements. The\r\n            comparison operator is used to decide the new order of element in\r\n            the respective data structure.\r\n          </Typography>\r\n          <div\r\n            className=\"Paris\"\r\n            style={{ position: \"absolute\", left: \"8%\", bottom: \"-14px\" }}\r\n          >\r\n            <img src={Logo} width=\"500px\" alt=\"Paris\" height=\"150px\"></img>\r\n          </div>\r\n        </Paper>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\nimport SortAlgo from \"./Components/Sortalgo\";\nimport Popup from \"./Components/Popup\";\nimport {\n  Toolbar,\n  Typography,\n  Slider,\n  Box,\n  Button,\n  Container,\n} from \"@mui/material\";\nconst Algos = [\n  { id: \"1\", type: \"Mergesort\" },\n  { id: \"2\", type: \"SelectionSort\" },\n  // { id: \"3\", type: \"Heapsort\" },\n  // { id: \"4\", type: \"Quicksort\" },\n];\nfunction App() {\n  const [taille, setTaille] = React.useState(100);\n  const [Arrow, setArrow] = React.useState(50);\n  const [algo, setAlgo] = React.useState(\"Mergesort\");\n\n  const ChangeSize = (event, newv) => {\n    setTaille(newv);\n  };\n  const ChangeArrow = (event, NumberofArrow) => {\n    setArrow(NumberofArrow);\n  };\n  const handleAlgo = (algo)=>{\n    setAlgo(algo)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"top\" style={{ backgroundColor: \"#006b65\" }}>\n        <div className=\"Topbar\">\n          {/* LOGO */}\n          <div className=\"Logo\">\n            <Toolbar>\n              <Typography\n                style={{ color: \"#fff\" }}\n                variant=\"h6\"\n                color=\"inherit\"\n                noWrap\n              >\n                Visualisation d'algorithmes de tri\n              </Typography>\n            </Toolbar>\n          </div>\n\n          {/* OPTIONS */}\n          <div className=\"options\">\n            <div className=\"middle Speed\">\n              <label\n                style={{ color: \"#fff\" }}\n                className=\"Lable\"\n                for=\"SpeedSlider\"\n              >\n                Taille {\" \"}\n              </label>\n              <Box width={100}>\n                <Slider\n                  id=\"SpeedSlider\"\n                  size=\"small\"\n                  value={taille}\n                  onChange={ChangeSize}\n                  defaultValue={20}\n                  aria-label=\"Small\"\n                  valueLabelDisplay=\"auto\"\n                  style={{ color: \"#fff\" }}\n                />\n              </Box>\n            </div>\n            <div className=\" middle Bar-width\">\n              <label style={{ color: \"#fff\" }} className=\"Lable\" for=\"BarWidth\">\n                Vitesse d'affichage{\" \"}\n              </label>\n              <Box width={100}>\n                <Slider\n                  id=\"BarWidth\"\n                  label=\"bar\"\n                  size=\"small\"\n                  value={Arrow}\n                  onChange={ChangeArrow}\n                  defaultValue={20}\n                  aria-label=\"Small\"\n                  valueLabelDisplay=\"auto\"\n                  style={{ color: \"#fff\" }}\n                />\n              </Box>\n            </div>\n          </div>\n          {/* SORTING ALGORITHMS */}\n          <div className=\"algos\">\n            <div className=\"listOfAlgo\" style={{ textAlign: \"center\" }}>\n              <Typography\n                style={{ color: \"#f68a2a\" }}\n                variant=\"h6\"                \n              >\n                Algorithmes de tri\n              </Typography>\n            </div>\n            {Algos.map((list) => (\n              <Button\n                onClick={()=>handleAlgo(list.type)}\n                key={list.id}\n                size=\"small\"\n                style={{ color: \"#fff\" }}\n                aria-label=\"add\"\n              >\n                {list.type} \n              </Button>\n            ))}\n            \n          </div>\n        </div>\n      </div>\n      <main>\n        <Container>\n\n          <div style={{ padding: \"2em 2em 2em\" }}>\n            <SortAlgo taille={taille / 6} time={Arrow * 2} algo={algo} />\n          </div>\n        </Container>\n      </main>\n      <Popup />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}